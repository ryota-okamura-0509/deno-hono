/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface mockPaths {
  "/": {
    /**
     * サーバー情報取得
     * @description モックサーバーの基本情報とエンドポイント一覧を取得
     */
    get: {
      responses: {
        /** @description サーバー情報 */
        200: {
          content: {
            "application/json": {
              /** @example 外部API モックサーバー */
              message?: string;
              /** @example 日別ジャンル投稿数統計を受信するモックサーバー */
              description?: string;
              endpoints?: {
                [key: string]: string;
              };
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
  };
  "/health": {
    /**
     * ヘルスチェック
     * @description サーバーの稼働状況を確認
     */
    get: {
      responses: {
        /** @description サーバー稼働中 */
        200: {
          content: {
            "application/json": {
              /** @example healthy */
              status?: string;
              /** @description メモリ使用量 */
              memory_usage?: Record<string, never>;
              /** @example 150 */
              stored_records?: number;
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
  };
  "/api/v1/stats/daily-genre": {
    /**
     * 受信した統計データ一覧取得
     * @description 受信した日別ジャンル統計データの一覧を取得（ページネーション対応）
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号 */
          page?: number;
          /** @description 1ページあたりの件数 */
          limit?: number;
        };
      };
      responses: {
        /** @description 統計データ一覧 */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["DailyGenreStat"][];
              pagination?: components["schemas"]["Pagination"];
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
    /**
     * 日別ジャンル統計データ受信
     * @description 日別のジャンル投稿数統計データを受信して保存
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["DailyGenreStatInput"][];
        };
      };
      responses: {
        /** @description データ受信成功 */
        201: {
          content: {
            "application/json": {
              /** @example 日別ジャンル統計データを正常に受信しました */
              message?: string;
              /** @example 2 */
              received_count?: number;
              /** Format: date-time */
              timestamp?: string;
              data?: components["schemas"]["DailyGenreStat"][];
            };
          };
        };
        /** @description リクエストデータが不正 */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description サーバーエラー */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * 統計データをクリア
     * @description 保存されている全ての統計データを削除
     */
    delete: {
      responses: {
        /** @description データクリア成功 */
        200: {
          content: {
            "application/json": {
              /** @example 統計データをクリアしました */
              message?: string;
              /** @example 150 */
              cleared_count?: number;
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
  };
  "/api/v1/stats/daily-genre/latest": {
    /**
     * 最新の統計データ取得
     * @description 最新の日別ジャンル統計データを取得
     */
    get: {
      parameters: {
        query?: {
          /** @description 取得件数 */
          limit?: number;
        };
      };
      responses: {
        /** @description 最新統計データ */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["DailyGenreStat"][];
              /** @example 10 */
              count?: number;
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
  };
  "/api/v1/stats/daily-genre/{date}": {
    /**
     * 特定日の統計データ取得
     * @description 指定された日付の日別ジャンル統計データを取得
     */
    get: {
      parameters: {
        path: {
          /** @description 取得対象の日付 (YYYY-MM-DD形式) */
          date: string;
        };
      };
      responses: {
        /** @description 指定日の統計データ */
        200: {
          content: {
            "application/json": {
              /**
               * Format: date
               * @example 2025-07-14
               */
              date?: string;
              data?: components["schemas"]["DailyGenreStat"][];
              /** @example 5 */
              count?: number;
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
  };
  "/api/v1/stats/summary": {
    /**
     * 統計サマリー取得
     * @description 受信した統計データのサマリー情報を取得
     */
    get: {
      responses: {
        /** @description 統計サマリー */
        200: {
          content: {
            "application/json": {
              /** @example 150 */
              total_records?: number;
              /** @example 8 */
              unique_genres?: number;
              /** @example 10 */
              unique_dates?: number;
              /**
               * @example {
               *   "プログラミング": {
               *     "total_count": 45,
               *     "records": 10
               *   },
               *   "日記": {
               *     "total_count": 23,
               *     "records": 8
               *   }
               * }
               */
              by_genre?: {
                [key: string]: {
                  total_count?: number;
                  records?: number;
                };
              };
              /**
               * @example {
               *   "2025-07-14": {
               *     "total_count": 15,
               *     "records": 8
               *   },
               *   "2025-07-13": {
               *     "total_count": 12,
               *     "records": 6
               *   }
               * }
               */
              by_date?: {
                [key: string]: {
                  total_count?: number;
                  records?: number;
                };
              };
              /** Format: date-time */
              timestamp?: string;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DailyGenreStatInput: {
      /**
       * Format: date
       * @description 投稿日付
       * @example 2025-07-14
       */
      date: string;
      /**
       * @description ジャンル名
       * @example プログラミング
       */
      genre: string;
      /**
       * @description 投稿数
       * @example 5
       */
      count: number;
    };
    DailyGenreStat: {
      /**
       * Format: date
       * @description 投稿日付
       * @example 2025-07-14
       */
      date?: string;
      /**
       * @description ジャンル名
       * @example プログラミング
       */
      genre?: string;
      /**
       * @description 投稿数
       * @example 5
       */
      count?: number;
      /**
       * Format: date-time
       * @description データ受信日時
       * @example 2025-07-14T15:30:00.000Z
       */
      received_at?: string;
    };
    Pagination: {
      /**
       * @description 現在のページ番号
       * @example 1
       */
      page?: number;
      /**
       * @description 1ページあたりの件数
       * @example 50
       */
      limit?: number;
      /**
       * @description 総データ数
       * @example 150
       */
      total?: number;
      /**
       * @description 総ページ数
       * @example 3
       */
      pages?: number;
    };
    Error: {
      /**
       * @description エラーメッセージ
       * @example データの処理中にエラーが発生しました
       */
      error?: string;
      /**
       * @description 詳細なエラー情報
       * @example Invalid JSON format
       */
      details?: string;
      /** @description 受信したデータ（バリデーションエラー時） */
      received?: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
